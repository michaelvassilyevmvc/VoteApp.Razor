// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace VoteApp.WebApi.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20221223063041_InsertSeedData")]
    partial class InsertSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.CandidateBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("candidates", "dbo");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d42621c-3756-4a82-bf2b-69fcfca6e0f2"),
                            DoB = new DateTime(1986, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "Михаил",
                            Image = "https://media.istockphoto.com/id/918169872/photo/close-up-view-of-a-siberian-tiger.jpg?s=1024x1024&w=is&k=20&c=kDcPgGgEuSPt7_HNNlHqXEf4g86-ZIF5NLuobfm9NYg=",
                            LName = "Васильев",
                            Login = "rebusmv",
                            Password = "q2w3e4r5"
                        },
                        new
                        {
                            Id = new Guid("cb06552d-4779-487d-a3ef-774406e705f9"),
                            DoB = new DateTime(2000, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "Семен",
                            LName = "Иванов",
                            Login = "ivanov",
                            Password = "123"
                        });
                });

            modelBuilder.Entity("Entities.Models.Vote", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "CandidateId");

                    b.HasIndex("CandidateId");

                    b.ToTable("votes");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7d42621c-3756-4a82-bf2b-69fcfca6e0f2"),
                            CandidateId = new Guid("d02c6bfb-fce6-4dbf-94ec-57991d2dfa4f"),
                            Created = new DateTime(2022, 12, 23, 6, 30, 41, 149, DateTimeKind.Utc).AddTicks(3956),
                            VoteDate = new DateTime(2022, 12, 23, 6, 30, 41, 149, DateTimeKind.Utc).AddTicks(3955)
                        });
                });

            modelBuilder.Entity("Entities.Models.PoliticCandidate", b =>
                {
                    b.HasBaseType("Entities.Models.CandidateBase");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoliticDocInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("politics", "dbo");
                });

            modelBuilder.Entity("Entities.Models.ProductCandidate", b =>
                {
                    b.HasBaseType("Entities.Models.CandidateBase");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.ToTable("products", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a7ca13c-b54d-438b-ac64-bf0afb5f27ab"),
                            Description = "Игровая приставка последнего поколения",
                            Image = "https://webimg.secondhandapp.com/1.1/5ee090244cda6c0045831abe",
                            State = 1,
                            Code = "1223654",
                            Name = "xBox",
                            Price = 1200m
                        },
                        new
                        {
                            Id = new Guid("d02c6bfb-fce6-4dbf-94ec-57991d2dfa4f"),
                            Description = "Революционная платформа с множеством эксклюзивов",
                            Image = "https://frankfurt.apollo.olxcdn.com/v1/files/la9yesqjseih3-KZ/image;s=1280x960",
                            State = 1,
                            Code = "773332",
                            Name = "PS5",
                            Price = 2000m
                        });
                });

            modelBuilder.Entity("Entities.Models.Vote", b =>
                {
                    b.HasOne("Entities.Models.CandidateBase", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.PoliticCandidate", b =>
                {
                    b.HasOne("Entities.Models.CandidateBase", null)
                        .WithOne()
                        .HasForeignKey("Entities.Models.PoliticCandidate", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ProductCandidate", b =>
                {
                    b.HasOne("Entities.Models.CandidateBase", null)
                        .WithOne()
                        .HasForeignKey("Entities.Models.ProductCandidate", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
